<?php
/**
*@file
*Event Log Backup module
*@author Akskay sharma <akshay31057@gmail.com>
*/
/**
*Implementation of hook_permission 
*
*/
function event_log_backup_permission() {
  return array(
    'administer backup' => array(
      'title' => t('Administer Backup Content'),
      'description' => t('Perform administration tasks for backup content.'),
    ),
  );
}


/**
*Implementation of hook_menu 
*
*/
function event_log_backup_menu() {
   $items['admin/config/event_log_backup'] = array(
  'title' => 'Backup log content settings',
  'type' => MENU_NORMAL_ITEM,
  'page callback' => 'drupal_get_form',
'page arguments'=>array('event_log_backup_admin_form'),
'access arguments'=>array('administer backup'),
  
);
return $items;
}

/*
* Implementation of event_log_admin_form
*@param $form :associative array to contain information related to form elements.
*@param $form_state :associative array contaning values realted to elemnts in the form.
*@return $form   :associtaive array which has information to form elements.  
*/
function event_log_backup_admin_form($form ,&$form_state) {
 
     $form['event_log_backup_cron_enable'] = array(
      '#type' =>'checkbox', 
      '#title' => t('Enable Backup Content on Cron Run'),
       '#default_value'=>variable_get('event_log_backup_cron_enable',0),

);

      $form['event_log_backup_button'] = array(
  '#type' => 'submit',
  '#value' => t('View/Update and Save Backup Content'),
  '#submit' => array('event_log_backup_read'),
);
 
   $form['event_log_backup_email_text'] = array(
  '#title' => t('Text to be send as Email'),
'#type' => 'textarea',
'#description' => t('Enter some text to send with Email'),
'#default_value' => variable_get('event_log_backup_email_text',''),
);

   $form['event_log_backup_send_button'] = array(
  '#type' => 'submit',
  '#value' => t('Send Backup Content'),
  '#submit' => array('event_log_backup_send'),
);

    return system_settings_form($form);

}

/**
*Implementation of event_log_backup_read 
*Read logs from event_log table from drupal database.
*/
function event_log_backup_read(){
$query='select * from event_log;';

    $result=db_query($query);
    $results= $result->fetchAll();   
    $text="";
            
  foreach($results as $res) {
     $text.=$res->lid." ".$res->type." ".$res->operation." ".$res->path." ".$res->form_id." ".$res->ref_numeric." ".$res->ref_char." ".$res->description." ".$res->info." ".$res->uid." ".$res->ip." ".$res->created."\n";
      

  }
  variable_set('event_log_backup_email_text',$text);
file_save_data($text,"public://backup.txt",FILE_EXISTS_RENAME);
}

/**
*Implementation of event_log_backup_send
*Sends the database via email to administrator.
*/
function event_log_backup_send(){
  $site_mail = variable_get('site_mail','');  
  drupal_mail('event_log_backup','event_log_backup_email',$site_mail,language_default());
  
  }


/**
*Implementation of hook_cron
*Run when enabled to run and backup and send the logs in event_log table.
*/

function event_log_backup_cron() {
    

 if(variable_get('event_log_backup_cron_enable',0)){
 event_log_backup_read();
 event_log_backup_send();
 }  
}

/**
*Implementation of hook_mail
*Mails the backup to administrator.
*/

function event_log_backup_mail($key, &$message, $params) {
  switch($key)
  {
           case 'event_log_backup_email':
    $message['subject']=t('This is Backup Content ');
    $message['body'][]=t('This is report from backup content on event-log');
    $message['body'][]=t(variable_get('event_log_backup_email_text',''));
    
                break;

  }
}
?>

