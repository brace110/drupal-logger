<?php
/**
 * @file
 *'Log Data Visualization Analysis Module' visualizes event_log data to admin using D3 graphics. 
*/
/**
*Implementataion of hook_permission
*/
function log_data_visualization_analysis_permission() {
  return array(
    'access viz' => array(
      'title' => t('Administer Viz'),
      'description' => t('Access administration viz on my site.'),
    ),
    'access vizone' => array(
      'title' => t('Administer Vizone'),
      'description' => t('Access administration vizone on my site.'),
    ),
    'access viztwo' => array(
      'title' => t('Administer Viztwo'),
      'description' => t('Access administration viztwo on my site.'),
    ),
    'access config' =>array(
      'title'=>t('Configuration page'),
      'description'=>t('Access configuration Page for log analysis'),
      ),
  );
}
/**
* Implementation of hook_menu
*/
function log_data_visualization_analysis_menu() {
   $items['viz'] = array('title' => 'Event Log Visualizations',
    'description' => 'Different event log visualizations using d3.',
    'page callback' => 'log_data_visualization_analysis_linegraph',
    'access arguments' => array('access viz'),
    );
   $items['viz/vizone'] = array(
      'title' => 'Line graph',
    'description' => 'Uses d3 module to create a line graph',
    'access callback' => TRUE,
    'page callback' => 'log_data_visualization_analysis_linegraph',
    'type' => MENU_DEFAULT_LOCAL_TASK,    );
   $items['viz/viztwo'] = array(
          'title' => 'Bar chart',
    'description' => 'Uses d3 module to create a bar chart',
    'access callback' => TRUE,
    'page callback' => 'log_data_visualization_analysis_bar',
    'type' => MENU_LOCAL_TASK,    );
  

   $items['admin/config/log_data_visualization_analysis']=array(
    'title'=>'Config page for log analysis',
    'page callback' => 'drupal_get_form',
'page arguments'=>array('log_data_visualization_analysis_admin_form'),
    'access arguments'=>array('access config'),
    );
    return $items;
}
/**
*Implementation of log_data_visualization_analysis_admin_form
*@param $form :associative array to contain information related to form elements.
*@param $form_state :associative array contaning values realted to elemnts in the form.
*@return $form   :associtaive array which has information to form elements. 
*/
function log_data_visualization_analysis_admin_form($form ,&$form_state) {
      $form['submit_button'] = array(
  '#type' => 'submit',
  '#value' => t('Go to Visualizations'),
  '#submit' => array('log_data_visualization_analysis_select'),
  );
    return $form;
  }
/**
*Implementation of log_data_visualization_analysis_select 
*Redirects to the visualization page.
*@param $form :associative array to contain information related to form elements.
*@param $form_state :associative array contaning values realted to elemnts in the form.
*@return void
*/
function log_data_visualization_analysis_select($form,&$form_state)
{  
  drupal_goto('viz');
}
/**
 * Generates line graph for distinct operations distribution for every month
 *
 * @return string
 *   HTML for the page content.
 */
function log_data_visualization_analysis_linegraph() {
 
  $leg_aux=array();
  $query2="Select distinct(operation) from event_log where type !='authentication'";
  $k=1;
  $operate=array();
  $operatio=db_query($query2);
  $operations=$operatio->fetchAll(PDO::FETCH_ASSOC);
  if(count($operations)==0)
   return "<strong>No Log Data</strong>";
  foreach ($operations as $row) {
    $leg_aux[strval($row['operation'])]=$k++;
    }
  $leg=array();
  foreach ($leg_aux as $key => $value) {
    array_push($leg,strval($key));
    
  }
  $query="Select operation, created from event_log where type !='authentication' ";
  $result=db_query($query);
  $results=$result->fetchAll(PDO::FETCH_ASSOC);
  $arr=array();
  $final_line=array();
  $h=0;
  $prev="q";
  
  foreach ($results as $row) {
    $h++;
    $curop=$row['operation'];
      $curmonth=strval(date("M-Y",$row['created']));
  
    if($curmonth!=$prev)
      {
         
        if($h!=1)
          array_push($final_line,$arr);
        
        $arr[0]=$curmonth;
        for($i=1;$i<$k;$i++)
          $arr[$i]=0;
        $arr[$leg_aux[$curop]]++;
      }
      else 
      {
          $arr[$leg_aux[$curop]]++;
      }

      $prev=$curmonth;
  
  }
  array_push($final_line, $arr);
  
  $chart = array(
    'id' => 'visualization',
    'type' => 'linegraph',
    'legend' => $leg,
    'rows' =>$final_line,
  );

  return d3_draw($chart);
}
/**
 * Generates bar graph for distinct operations from event_log table in drupal database  
 *
 * @return string
 *   HTML for the page content.
 */
  function log_data_visualization_analysis_bar() {

  $query = db_query("SELECT operation, count(*) FROM {event_log} where type != :type GROUP BY operation",array(':type'=>'authentication'));
  $result = $query->fetchAll(PDO::FETCH_ASSOC);
  $newarray=array();
 if(count($result)==0)
  return "<strong>No Log Data</strong>";
  foreach($result as $row)
  {
             array_push($newarray,array($row['operation'],$row['count(*)']));
                 
  }
  
  $chart = array(
    'id' => 'visualization',
    'type' => 'barchart',
    'legend' => array(
      'Operations',
    ),
    'rows' => $newarray,
  );

  
  return d3_draw($chart);
}


?>


